
from pathlib import Path

# Read configuration
configfile: "config/config.yaml"

SOURCEDIR = Path(config["sourcedir"])
OUTDIR = Path(config["results"])
READSDIR = Path(config["readsdir"])
genome_fasta = Path(config["genome_fasta"])
existing_annotation = Path(config["existing_annotation"])


READS = [filepath for filepath in Path(READSDIR).glob('**/*')]



rule all:
    input:
        # clean_sam = expand( OUTDIR / "TALON" / "cleaned_alignments" / "{sample}" / "{sample}_clean.sam", sample=[ read.name.split('.')[0] for read in READS]),
        # database = OUTDIR / "TALON" / "talon.db",
        # labeled_sam = expand(OUTDIR / "TALON" / "labeled" / "{sample}_labeled.sam", sample=[ read.name.split('.')[0] for read in READS])
        # OUTDIR / "TALON" / "config.csv",
        log = OUTDIR / "TALON" / "annotated" / "talon_QC.log"




rule minimap2_align:
    input:
        genome = genome_fasta,
        fq = READSDIR / "{sample}.fq"
    params:
        outdir = OUTDIR,
        opts = config["minimap2_opts"]
    output:
        sam_files = OUTDIR / "alignments" /"{sample}.sam"
    threads: 4
    singularity:
        'docker://quay.io/biocontainers/minimap2:2.17--h5bf99c6_4'
    shell:
        '''
        minimap2 \
            -t {threads} \
            -ax splice \
            {params.opts} \
            {input.genome} \
            {input.fq} > {output.sam_files}
        '''


# TALON
rule get_SJs_from_gtf:
    input:
        annotation = existing_annotation,
        genome = genome_fasta
    params:
        outdir = OUTDIR
    output:
        splicejns = OUTDIR / "TALON" / "cleaned_alignments" / "spliceJns.txt"
    threads: 1
    singularity:
        "docker://biocontainers/transcriptclean:v2.0.2_cv1"
    shell:
        '''
        get_SJs_from_gtf \
            --f {input.annotation} \
            --g {input.genome} \
            --o {output.splicejns}
        '''


rule transcriptclean:
    input:
        sam_files = rules.minimap2_align.output.sam_files,
        genome = genome_fasta,
        splicejns = rules.get_SJs_from_gtf.output.splicejns
    params:
        outdir = lambda wildcards: OUTDIR / "TALON" / "cleaned_alignments" / wildcards.sample / wildcards.sample
    output:
        clean_sam = OUTDIR / "TALON" /"cleaned_alignments" / "{sample}" / "{sample}_clean.sam"
    threads: 10
    singularity:
        "docker://biocontainers/transcriptclean:v2.0.2_cv1"
    shell:
        '''
        TranscriptClean \
            --sam {input.sam_files} \
            --genome {input.genome} \
            -t {threads} \
            --spliceJns {input.splicejns} \
            --outprefix {params.outdir}
        '''


rule talon_initialize_database:
    input:
        annotation = existing_annotation
    params:
        outdir = OUTDIR / "TALON" / "talon",
        annotation_name = existing_annotation.name.split('.')[0],
        genome_name = genome_fasta.name.split('.')[0]
    output:
        database = OUTDIR / "TALON" / "talon.db"
    threads: 4
    singularity:
        "docker://biocontainers/talon:v5.0_cv1"
    shell:
        '''
        talon_initialize_database \
            --f {input.annotation} \
            --a {params.annotation_name} \
            --g {params.genome_name} \
            --5p 500 \
            --3p 300 \
            --l 0 \
            --o {params.outdir}
        '''


rule talon_label_reads:
    input:
        clean_sam = rules.transcriptclean.output.clean_sam,
        genome = genome_fasta
    params:
        outdir = lambda wildcards: OUTDIR / "TALON" / "labeled" / wildcards.sample
    output:
        labeled_sam = OUTDIR / "TALON" / "labeled" / "{sample}_labeled.sam"
    threads: 4
    singularity:
        "docker://biocontainers/talon:v5.0_cv1"
    shell:
        '''
        mkdir -p labeled
        talon_label_reads \
            --f {input.clean_sam}\
            --g {input.genome} \
            --t {threads} \
            --ar 20 \
            --o {params.outdir}
        '''


rule create_talon_config:
    input:
        reads = READS
    params:
        outdir = OUTDIR,
        names = [ read.name.split('.')[0] for read in READS],
        labels = OUTDIR / "TALON" / "labeled"
    output:
        config = OUTDIR / "TALON" / "config.csv"
    threads: 1
    shell:
        '''
        for name in {params.names};
        do
            printf "%s,%s,ONT,{params.labels}/%s_labeled.sam\n" $name $name $name >>  {output.config};
        done;
        '''


rule talon_annotator:
    input:
        config = rules.create_talon_config.output.config,
        db = rules.talon_initialize_database.output.database
    params:
        outdir = OUTDIR / "TALON" / "annotated",
        genome_name = genome_fasta.name.split('.')[0],
    output:
        log = OUTDIR / "TALON" / "annotated" / "talon_QC.log"
    threads: 10
    singularity:
        "docker://biocontainers/talon:v5.0_cv1"
    shell:
        '''
        talon \
            --f {input.config} \
            --db {input.db} \
            --build {params.genome_name}\
            --o {params.outdir}
        '''

